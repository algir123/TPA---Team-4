import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import find_peaks, savgol_filter
from scipy.optimize import curve_fit

def linear_func(x, m, b):
    return m * x + b

beta = np.array([
  4.0,4.1,4.2,4.3,4.4,4.5,4.6,4.7,4.8,4.9,5.0,5.1,5.2,5.3,5.4,5.5,5.6,5.7,5.8,5.9,6.0,6.1,6.2,6.3,6.4,6.5,6.6,6.7,6.8,6.9,7.0,7.1,7.2,7.3,7.4,7.5,7.6,7.7,7.8,7.9,
  8.0,8.1,8.2,8.3,8.4,8.5,8.6,8.7,8.8,8.9,9.0,9.1,9.2,9.3,9.4,9.5,9.6,9.7,9.8,9.9,10.0,10.1,10.2,10.3,10.4,10.5,10.6,10.7,10.8,10.9,11.0,11.1,11.2,11.3,11.4,11.5,11.6,11.7,11.8,11.9,
  12.0,12.1,12.2,12.3,12.4,12.5,12.6,12.7,12.8,12.9,13.0,13.1,13.2,13.3,13.4,13.5,13.6,13.7,13.8,13.9,14.0,14.1,14.2,14.3,14.4,14.5,14.6,14.7,14.8,14.9,15.0,15.1,15.2,15.3,15.4,15.5,15.6,15.7,15.8,15.9,
  16.0,16.1,16.2,16.3,16.4,16.5,16.6,16.7,16.8,16.9,17.0,17.1,17.2,17.3,17.4,17.5,17.6,17.7,17.8,17.9,18.0,18.1,18.2,18.3,18.4,18.5,18.6,18.7,18.8,18.9,19.0,19.1,19.2,19.3,19.4,19.5,19.6,19.7,19.8,19.9,
  20.0,20.1,20.2,20.3,20.4,20.5,20.6,20.7,20.8,20.9,21.0,21.1,21.2,21.3,21.4,21.5,21.6,21.7,21.8,21.9,22.0,22.1,22.2,22.3,22.4,22.5,22.6,22.7,22.8,22.9,23.0,23.1,23.2,23.3,23.4,23.5,23.6,23.7,23.8,23.9,
  24.0,24.1,24.2,24.3,24.4,24.5,24.6,24.7,24.8,24.9,25.0,25.1,25.2,25.3,25.4,25.5,25.6,25.7,25.8,25.9,26.0,26.1,26.2,26.3,26.4,26.5,26.6,26.7,26.8,26.9,27.0,27.1,27.2,27.3,27.4,27.5,27.6,27.7,27.8,27.9,
  28.0,28.1,28.2,28.3,28.4,28.5,28.6,28.7,28.8,28.9,29.0,29.1,29.2,29.3,29.4,29.5,29.6,29.7,29.8,29.9,30.0,30.1,30.2,30.3,30.4,30.5,30.6,30.7,30.8,30.9,31.0,31.1,31.2,31.3,31.4,31.5,31.6,31.7,31.8,31.9,
  32.0,32.1,32.2,32.3,32.4,32.5,32.6,32.7,32.8,32.9,33.0,33.1,33.2,33.3,33.4,33.5,33.6,33.7,33.8,33.9,34.0
])

beta2 = np.array([
  4.0,4.1,4.2,4.3,4.4,4.5,4.6,4.7,4.8,4.9,5.0,5.1,5.2,5.3,5.4,5.5,5.6,5.7,5.8,5.9,
  6.0,6.1,6.2,6.3,6.4,6.5,6.6,6.7,6.8,6.9,7.0,7.1,7.2,7.3,7.4,7.5,7.6,7.7,7.8,7.9,
  8.0,8.1,8.2,8.3,8.4,8.5,8.6,8.7,8.8,8.9,9.0,9.1,9.2,9.3,9.4,9.5,9.6,9.7,9.8,9.9,
  10.0,10.1,10.2,10.3,10.4,10.5,10.6,10.7,10.8,10.9,11.0,11.1,11.2,11.3,11.4,11.5,
  11.6,11.7,11.8,11.9,12.0,12.1,12.2,12.3,12.4,12.5,12.6,12.7,12.8,12.9,13.0,13.1,
  13.2,13.3,13.4,13.5,13.6,13.7,13.8,13.9,14.0,14.1,14.2,14.3,14.4,14.5,14.7,14.8,
  14.9,15.0,15.1,15.2,15.3,15.4,15.5,15.6,15.7,15.8,15.9,16.0,16.1,16.2,16.3,16.4,
  16.5,16.6,16.7,16.8,16.9,17.0,17.1,17.2,17.3,17.4,17.5,17.6,17.7,17.8,17.9,18.0,
  18.1,18.2,18.3,18.4,18.5,18.6,18.7,18.8,18.9,19.0,19.1,19.2,19.3,19.4,19.5,19.6,
  19.7,19.8,19.9,20.0,20.1,20.2,20.3,20.4,20.5,20.6,20.7,20.8,20.9,21.0,21.1,21.2,
  21.3,21.4,21.5,21.6,21.7,21.8,21.9,22.0,22.1,22.2,22.3,22.4,22.5,22.6,22.7,22.8,
  22.9,23.0,23.1,23.2,23.3,23.4,23.5,23.6,23.7,23.8,23.9,24.0
])

R0 = np.array([
  2.2,2.0,2.6,1.2,1.0,1.4,1.8,2.6,1.8,1.6,1.2,3.0,3.0,2.0,3.8,11.8,37.2,74.4,99.0,125.0,139.4,172.0,183.6,215.0,219.4,250.2,251.6,255.8,274.6,286.4,264.4,287.0,283.6,288.6,286.0,281.8,277.0,285.2,290.8,265.2,
  271.6,251.8,262.4,261.0,241.0,249.2,230.0,241.0,279.4,406.4,724.6,708.6,255.0,243.4,244.6,240.6,212.0,228.6,219.8,211.2,353.4,1541.2,2103.6,656.6,181.4,175.6,174.4,174.8,147.0,163.6,151.6,140.2,131.2,134.2,125.2,107.4,110.6,103.4,95.0,98.2,
  98.8,93.6,87.0,84.8,78.2,79.6,72.0,73.6,67.2,65.2,58.6,57.0,53.4,49.2,45.4,44.0,43.2,41.8,41.8,38.4,40.0,33.4,30.8,31.6,27.6,26.2,23.8,26.4,22.4,25.2,27.4,28.4,23.8,20.6,25.8,19.6,20.8,19.8,22.8,17.6,
  20.6,18.4,19.2,19.0,19.0,17.6,18.4,15.2,14.6,15.8,14.0,14.8,14.8,13.4,10.4,11.6,11.2,13.2,14.4,20.2,19.6,18.8,33.8,68.0,33.8,12.0,12.8,11.6,12.6,10.4,14.8,12.4,11.2,14.2,13.0,11.2,12.0,13.0,11.4,14.8,
  10.0,11.0,10.2,11.8,18.4,67.6,143.2,140.8,63.0,13.2,9.6,12.6,10.6,12.0,10.4,10.4,7.4,10.6,9.2,7.8,10.4,10.2,9.0,11.0,6.6,7.6,8.0,9.2,8.2,6.0,8.2,6.0,10.4,7.6,7.0,9.2,7.0,5.4,7.8,6.4,
  6.4,5.4,7.6,6.0,5.6,6.0,5.2,4.4,6.6,3.8,4.8,5.0,4.6,4.0,3.4,3.2,3.2,5.6,2.4,4.0,4.0,5.2,3.2,4.8,4.6,4.8,2.6,5.4,3.4,5.0,3.6,4.8,2.6,2.6,3.0,4.4,3.6,2.8,3.4,4.4,
  6.0,7.2,5.4,3.6,4.2,3.4,2.8,2.2,3.2,2.2,3.0,3.2,3.2,2.4,2.0,3.2,3.6,2.8,1.0,3.6,3.4,2.0,3.0,3.2,2.2,2.4,2.0,2.6,2.0,3.2,3.2,3.6,2.8,2.0,2.6,2.6,1.8,5.8,10.8,7.0,
  4.0,6.8,2.2,1.6,2.6,1.6,3.0,2.6,2.0,1.8,2.2,2.0,2.6,1.4,2.2,2.4,1.0,1.4,2.4,3.0,3.0
])

R1 = np.array([
  57.8,94.4,109.0,123.0,137.4,144.6,143.2,141.2,152.0,151.0,146.6,135.8,139.0,146.0,150.4,137.4,134.6,139.2,133.0,133.0,
  131.6,125.2,157.0,266.2,352.0,214.6,127.0,121.0,118.2,115.4,126.2,509.8,911.0,511.6,113.8,94.4,85.4,81.0,74.6,69.2,
  72.0,61.4,61.6,58.8,56.8,51.8,50.4,51.2,45.4,50.0,46.8,39.8,35.4,38.4,28.8,26.8,29.0,24.6,25.4,23.0,
  22.4,22.2,20.2,20.4,20.2,17.2,19.8,19.6,14.6,20.0,20.2,14.8,13.8,12.6,19.2,16.0,13.2,14.0,11.2,14.6,
  12.2,12.4,14.8,16.6,13.8,16.0,19.4,21.2,29.2,51.2,38.8,14.2,16.0,11.2,13.0,13.6,13.8,15.2,12.6,13.4,
  15.6,14.2,13.8,15.6,30.8,121.2,68.8,15.8,10.6,14.6,11.0,12.8,11.6,11.0,12.2,10.8,8.0,10.4,11.6,8.2,
  10.6,9.8,10.6,6.2,6.0,8.8,8.2,6.4,8.2,6.4,9.6,8.8,8.4,4.6,6.0,7.0,5.6,7.0,5.2,4.8,
  5.4,5.6,6.4,4.8,4.4,4.8,3.2,5.8,4.2,3.8,5.4,4.6,5.2,4.4,5.4,9.6,9.4,5.4,3.2,3.0,
  3.0,2.8,4.6,3.6,4.4,4.8,2.6,2.4,2.4,2.8,3.0,3.2,2.0,2.0,2.8,3.6,2.6,2.6,2.4,7.0,
  15.2,27.6,18.4,8.2,2.8,4.2,2.0,3.6,1.4,2.0,2.4,3.2,1.8,1.8,1.8,1.6,1.4,0.6,1.8,0.8
])
R0_smooth = savgol_filter(R0, window_length=5, polyorder=2)
R1_smooth = savgol_filter(R1, window_length=5, polyorder=2) 

peaks, _ = find_peaks(np.log(R0_smooth), prominence = 0.8)
liste_peaks = []

peaks2, _ = find_peaks(np.log(R1_smooth), prominence = 0.8)
liste_peaks2 = []

for i in range(len(peaks)):
    liste_peaks.append((float(beta[peaks][i]), float(np.log(R0_smooth)[peaks][i])))
    
for i in range(len(peaks)):
    liste_peaks2.append((float(beta2[peaks2][i]), float(np.log(R1_smooth)[peaks2][i])))

print(liste_peaks)

fig, (ax1, ax2) = plt.subplots(2, 1, sharex=True)
ax1.plot(beta, np.log(R0_smooth), "-k", label = 'LiF')

ax1.set_ylabel(r"$\log(R)$")
ax1.text(12, 6, 'n=1', fontsize=9)
ax1.text(22, 4, 'n=2', fontsize=9)
ax1.text(29, 2, 'n=3', fontsize=9)
ax1.legend()
ax1.grid(alpha=0.3)

# --- Bottom plot ---
# (Replace with other data or reuse same depending on your needs)

ax2.plot(beta2, np.log(R1_smooth), "-k", label = 'NaCl')
ax2.set_ylabel(r"$\log(R)$")
ax2.text(8, 5, 'n=1', fontsize=9)
ax2.text(15.5, 3.5, 'n=2', fontsize=9)
ax2.text(20, 2.5, 'n=3', fontsize=9)
ax2.legend()
ax2.grid(alpha=0.3)

# Only one shared x-axis label at the bottom
ax2.set_xlabel(r"$\beta$ [$^\circ$]")

plt.tight_layout()
plt.show()


LiF = [(9.0, 6.534411567585019), (10.2, 7.4555529356678925), (18.3, 3.9809092045591368), (20.6, 4.898052996839044), (28.1, 1.9050881545350578), (31.8, 2.21234773891044)]
NaCl = [(6.4, 5.741316784946196), (7.2, 6.649125176701888), (12.9, 3.809958638799219), (14.5, 4.503422184953881), (19.7, 2.194044924418839), (22.2, 3.162214766318199)]


def plot_sin_theta_vs_n_over_lambda(crystal, label, marker, line):
    angles = np.array([x[0] for x in crystal])
    nlambda = [63.06, 71.08, 126.12, 142.16, 189.18, 213.24]
    popt, pcov = curve_fit(linear_func, np.sin(np.radians(angles)), nlambda)
    x= np.linspace(0, 0.5, 100)
    incertitude_pente = pcov.diagonal()[0]**0.5
    m = popt[0]
    print(f"{label} : pente = {m:.2f} ± {incertitude_pente:.2f} pm")
    plt.plot(x, linear_func(x, *popt), line,color='black')
    sin_theta = np.sin(np.radians(angles))
    plt.plot(sin_theta, nlambda ,'o', marker = marker,color='black', label=label)


plt.figure(figsize=(8,6))
plot_sin_theta_vs_n_over_lambda(LiF, 'LiF', 'o', ':')
plot_sin_theta_vs_n_over_lambda(NaCl, 'NaCl', 'v', '--')
plt.xlabel(r'sin $\beta$')
plt.ylabel('nλ \u00D7$ 10^{12}$ m')
plt.xlim(0, 0.5)
plt.ylim(0, 200)
plt.title('')
plt.legend()
plt.grid(True)
plt.show()